# Default values for chatbot-ai-system
replicaCount: 3

image:
  repository: ghcr.io/cbratkovics/chatbot-ai-system
  pullPolicy: IfNotPresent
  tag: ""  # Overrides the image tag whose default is the chart appVersion

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8000
  metricsPort: 9090
  annotations: {}

ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/websocket-services: chatbot-ai-system
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
  hosts:
    - host: api.chatbot.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: chatbot-ai-system-tls
      hosts:
        - api.chatbot.example.com

resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - chatbot-ai-system
          topologyKey: kubernetes.io/hostname

# Liveness and Readiness probes
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 5432
        - protocol: TCP
          port: 6379

# Service Monitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  labels:
    release: prometheus

# Environment Variables
env:
  - name: ENVIRONMENT
    value: production
  - name: LOG_LEVEL
    value: INFO
  - name: WORKERS
    value: "4"
  - name: MAX_CONNECTIONS
    value: "1000"
  - name: RATE_LIMIT_REQUESTS
    value: "100"
  - name: RATE_LIMIT_PERIOD
    value: "60"

# Secrets (should be managed by external secret manager)
secrets:
  create: true
  # External Secrets Operator can be used
  externalSecrets:
    enabled: false
    backend: vault
    roleName: chatbot-ai-system
  # Manual secrets (not recommended for production)
  manual:
    OPENAI_API_KEY: ""
    ANTHROPIC_API_KEY: ""
    DATABASE_URL: ""
    REDIS_URL: ""
    JWT_SECRET_KEY: ""

# ConfigMap
configMap:
  create: true
  data:
    config.yaml: |
      providers:
        - name: openai
          enabled: true
          models:
            - gpt-4
            - gpt-3.5-turbo
          rate_limit: 100
        - name: anthropic
          enabled: true
          models:
            - claude-3-opus
            - claude-3-sonnet
          rate_limit: 50
      cache:
        enabled: true
        ttl: 3600
        strategy: hybrid
      observability:
        metrics_enabled: true
        tracing_enabled: true
        logging_format: json

# Redis subchart configuration
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: ""  # Will be auto-generated if not set
  master:
    persistence:
      enabled: true
      size: 8Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# PostgreSQL subchart configuration
postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    postgresPassword: ""  # Will be auto-generated if not set
    database: chatbot
  primary:
    persistence:
      enabled: true
      size: 10Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Prometheus subchart configuration
prometheus:
  enabled: false  # Use external Prometheus if available
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: 30  # Days
  storage:
    type: s3
    bucket: chatbot-backups
    region: us-east-1

# Monitoring and Alerting
monitoring:
  enabled: true
  dashboards:
    enabled: true
    labels:
      grafana_dashboard: "1"
  alerts:
    enabled: true
    rules:
      - alert: HighErrorRate
        expr: rate(chatbot_ai_system_errors_total[5m]) > 0.05
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High error rate detected
      - alert: HighLatency
        expr: histogram_quantile(0.95, rate(chatbot_ai_system_request_duration_seconds_bucket[5m])) > 0.5
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High latency detected (P95 > 500ms)
      - alert: PodMemoryUsage
        expr: container_memory_usage_bytes{pod=~"chatbot-ai-system.*"} / container_spec_memory_limit_bytes > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Pod memory usage above 80%

# Feature Flags
features:
  rateLimit:
    enabled: true
    global: 1000
    perTenant: 100
  cache:
    enabled: true
    semantic: true
  multiTenancy:
    enabled: true
    isolation: strict
  circuitBreaker:
    enabled: true
    threshold: 5
    timeout: 60