name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.12"  # Updated from 3.11 to 3.12
  POETRY_VERSION: "1.8.5"

jobs:
  quality-checks:
    name: Code Quality and Type Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        id: py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - name: Install package
        run: poetry install --no-interaction

      - name: Lint (Ruff/Black/Isort) â€” fail on issues
        run: poetry run task lint

      - name: Type check (mypy)
        run: poetry run task typecheck

  tests:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache .venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - name: Install package
        run: poetry install --no-interaction

      - name: Ensure results dir exists
        run: mkdir -p benchmarks/results

      - name: Run tests (with JUnit)
        run: |
          poetry run pytest -q --maxfail=1 --disable-warnings \
            --junitxml=benchmarks/results/junit_ci.xml

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: junit-and-logs
          path: benchmarks/results/junit_ci.xml
          if-no-files-found: error

  performance-tests:
    name: k6 Smoke Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    # Add the rest of your performance tests configuration here
