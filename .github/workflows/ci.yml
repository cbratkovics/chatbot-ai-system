name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  NODE_VERSION: "18"

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install package
        run: poetry install --no-interaction

      - name: Run formatters
        run: |
          poetry run black --check src tests
          poetry run isort --check-only src tests

      - name: Run linters
        run: |
          poetry run ruff check src tests
          poetry run flake8 src tests --max-line-length=100 --extend-ignore=E203,W503
          poetry run pylint src

      - name: Type checking
        run: poetry run mypy src --ignore-missing-imports

      - name: Security scan
        run: |
          poetry run bandit -r src -ll
          poetry run safety check --json

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install package
        run: poetry install --no-interaction

      - name: Run unit tests
        run: |
          poetry run pytest tests/unit \
            -m "unit" \
            -v \
            --tb=short \
            --cov=src/chatbot_ai_system \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=test-results/junit.xml

      - name: Run integration tests
        if: matrix.python-version == '3.11'
        run: |
          poetry run pytest tests/integration \
            -m "integration" \
            -v \
            --tb=short \
            --maxfail=3

      - name: Upload coverage
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Build package
        run: |
          poetry version $(poetry version -s)
          poetry build

      - name: Check package
        run: |
          pip install twine
          twine check dist/*

      - name: Test installation
        run: |
          pip install dist/*.whl
          chatbotai --version
          python -c "from chatbot_ai_system import __version__; print(__version__)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            chatbot-ai-system:latest
            chatbot-ai-system:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.run_id }}

      - name: Test Docker image
        run: |
          docker run --rm chatbot-ai-system:latest chatbotai --version
          docker run --rm -d -p 8000:8000 --name test-container chatbot-ai-system:latest
          sleep 5
          curl -f http://localhost:8000/health || exit 1
          docker stop test-container

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: poetry install --with docs

      - name: Build documentation
        run: |
          poetry run mkdocs build --strict

      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/