name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.12"  # Updated from 3.11 to 3.12

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') }}
          generate_release_notes: true

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}  # Now uses 3.12

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Set version
        run: poetry version ${{ needs.release.outputs.version }}

      - name: Build package
        run: poetry build

      - name: Publish to Test PyPI
        if: contains(needs.release.outputs.version, 'rc') || contains(needs.release.outputs.version, 'beta')
        env:
          POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          if [ -n "$POETRY_PYPI_TOKEN_TESTPYPI" ]; then
            poetry config repositories.testpypi https://test.pypi.org/legacy/
            poetry config pypi-token.testpypi $POETRY_PYPI_TOKEN_TESTPYPI
            poetry publish -r testpypi
          else
            echo "TEST_PYPI_TOKEN not set, skipping Test PyPI publish"
          fi

      - name: Publish to PyPI
        if: ${{ !contains(needs.release.outputs.version, 'rc') && !contains(needs.release.outputs.version, 'beta') }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          if [ -n "$POETRY_PYPI_TOKEN_PYPI" ]; then
            poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
            poetry publish
          else
            echo "PYPI_TOKEN not set, skipping PyPI publish"
          fi

  docker:
    name: Build and Push Docker
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME || 'skip' }}
          password: ${{ secrets.DOCKER_PASSWORD || 'skip' }}
        continue-on-error: true

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
